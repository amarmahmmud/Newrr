package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"

	dbmodel "github.com/swiftwave-org/swiftwave/swiftwave_manager/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_manager/graphql/model"
)

// CreatePersistentVolume is the resolver for the createPersistentVolume field.
func (r *mutationResolver) CreatePersistentVolume(ctx context.Context, input model.PersistentVolumeInput) (*model.PersistentVolume, error) {
	record := persistentVolumeInputToDatabaseObject(&input)
	err := record.Create(ctx, r.ServiceManager.DbClient, r.ServiceManager.DockerManager)
	if err != nil {
		return nil, err
	}
	return persistentVolumeToGraphqlObject(record), nil
}

// DeletePersistentVolume is the resolver for the deletePersistentVolume field.
func (r *mutationResolver) DeletePersistentVolume(ctx context.Context, id int) (*model.PersistentVolume, error) {
	// fetch record
	var record dbmodel.PersistentVolume
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return nil, err
	}
	// delete record
	err = record.Delete(ctx, r.ServiceManager.DbClient, r.ServiceManager.DockerManager)
	if err != nil {
		return nil, err
	}
	return persistentVolumeToGraphqlObject(&record), nil
}

// PersistentVolumes is the resolver for the persistentVolumes field.
func (r *queryResolver) PersistentVolumes(ctx context.Context) ([]*model.PersistentVolume, error) {
	records, err := dbmodel.FindAllPersistentVolumes(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	var result []*model.PersistentVolume
	for _, record := range records {
		result = append(result, persistentVolumeToGraphqlObject(record))
	}
	return result, nil
}

// PersistentVolume is the resolver for the persistentVolume field.
func (r *queryResolver) PersistentVolume(ctx context.Context, id int) (*model.PersistentVolume, error) {
	var record dbmodel.PersistentVolume
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return nil, err
	}
	return persistentVolumeToGraphqlObject(&record), nil
}

// IsExistPersistentVolume is the resolver for the isExistPersistentVolume field.
func (r *queryResolver) IsExistPersistentVolume(ctx context.Context, name string) (*bool, error) {
	isExists, err := dbmodel.IsExistPersistentVolume(ctx, r.ServiceManager.DbClient, name, r.ServiceManager.DockerManager)
	return &isExists, err
}
