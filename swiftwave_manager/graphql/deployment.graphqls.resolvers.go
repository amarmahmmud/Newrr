package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/swiftwave-org/swiftwave/swiftwave_manager/graphql/model"
)

// Application is the resolver for the application field.
func (r *deploymentResolver) Application(ctx context.Context, obj *model.Deployment) (*model.Application, error) {
	panic(fmt.Errorf("not implemented: Application - application"))
}

// GitCredential is the resolver for the gitCredential field.
func (r *deploymentResolver) GitCredential(ctx context.Context, obj *model.Deployment) (*model.GitCredential, error) {
	panic(fmt.Errorf("not implemented: GitCredential - gitCredential"))
}

// ImageRegistryCredential is the resolver for the imageRegistryCredential field.
func (r *deploymentResolver) ImageRegistryCredential(ctx context.Context, obj *model.Deployment) (*model.ImageRegistryCredential, error) {
	panic(fmt.Errorf("not implemented: ImageRegistryCredential - imageRegistryCredential"))
}

// BuildArgs is the resolver for the buildArgs field.
func (r *deploymentResolver) BuildArgs(ctx context.Context, obj *model.Deployment) ([]*model.BuildArg, error) {
	panic(fmt.Errorf("not implemented: BuildArgs - buildArgs"))
}

// DeploymentLogs is the resolver for the deploymentLogs field.
func (r *deploymentResolver) DeploymentLogs(ctx context.Context, obj *model.Deployment) ([]*model.DeploymentLog, error) {
	panic(fmt.Errorf("not implemented: DeploymentLogs - deploymentLogs"))
}

// Deployment returns DeploymentResolver implementation.
func (r *Resolver) Deployment() DeploymentResolver { return &deploymentResolver{r} }

type deploymentResolver struct{ *Resolver }
