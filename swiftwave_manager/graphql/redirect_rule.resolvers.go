package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/swiftwave-org/swiftwave/swiftwave_manager/graphql/model"
)

// CreateRedirectRule is the resolver for the createRedirectRule field.
func (r *mutationResolver) CreateRedirectRule(ctx context.Context, input model.RedirectRuleInput) (*model.RedirectRule, error) {
	panic(fmt.Errorf("not implemented: CreateRedirectRule - createRedirectRule"))
}

// DeleteRedirectRule is the resolver for the deleteRedirectRule field.
func (r *mutationResolver) DeleteRedirectRule(ctx context.Context, id uint) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRedirectRule - deleteRedirectRule"))
}

// RedirectRule is the resolver for the redirectRule field.
func (r *queryResolver) RedirectRule(ctx context.Context, id uint) (*model.RedirectRule, error) {
	panic(fmt.Errorf("not implemented: RedirectRule - redirectRule"))
}

// RedirectRules is the resolver for the redirectRules field.
func (r *queryResolver) RedirectRules(ctx context.Context) ([]*model.RedirectRule, error) {
	panic(fmt.Errorf("not implemented: RedirectRules - redirectRules"))
}

// Domain is the resolver for the domain field.
func (r *redirectRuleResolver) Domain(ctx context.Context, obj *model.RedirectRule) (*model.Domain, error) {
	panic(fmt.Errorf("not implemented: Domain - domain"))
}

// RedirectRule returns RedirectRuleResolver implementation.
func (r *Resolver) RedirectRule() RedirectRuleResolver { return &redirectRuleResolver{r} }

type redirectRuleResolver struct{ *Resolver }
