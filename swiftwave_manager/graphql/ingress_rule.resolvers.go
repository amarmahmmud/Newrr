package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/swiftwave-org/swiftwave/swiftwave_manager/graphql/model"
)

// Domain is the resolver for the domain field.
func (r *ingressRuleResolver) Domain(ctx context.Context, obj *model.IngressRule) (*model.Domain, error) {
	panic(fmt.Errorf("not implemented: Domain - domain"))
}

// Application is the resolver for the application field.
func (r *ingressRuleResolver) Application(ctx context.Context, obj *model.IngressRule) (*model.Application, error) {
	panic(fmt.Errorf("not implemented: Application - application"))
}

// CreateIngressRule is the resolver for the createIngressRule field.
func (r *mutationResolver) CreateIngressRule(ctx context.Context, input model.IngressRuleInput) (*model.IngressRule, error) {
	panic(fmt.Errorf("not implemented: CreateIngressRule - createIngressRule"))
}

// DeleteIngressRule is the resolver for the deleteIngressRule field.
func (r *mutationResolver) DeleteIngressRule(ctx context.Context, id uint) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteIngressRule - deleteIngressRule"))
}

// IngressRule is the resolver for the ingressRule field.
func (r *queryResolver) IngressRule(ctx context.Context, id uint) (*model.IngressRule, error) {
	panic(fmt.Errorf("not implemented: IngressRule - ingressRule"))
}

// IngressRules is the resolver for the ingressRules field.
func (r *queryResolver) IngressRules(ctx context.Context) ([]*model.IngressRule, error) {
	panic(fmt.Errorf("not implemented: IngressRules - ingressRules"))
}

// IngressRule returns IngressRuleResolver implementation.
func (r *Resolver) IngressRule() IngressRuleResolver { return &ingressRuleResolver{r} }

type ingressRuleResolver struct{ *Resolver }
