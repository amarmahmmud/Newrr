package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"

	dbmodel "github.com/swiftwave-org/swiftwave/swiftwave_manager/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_manager/graphql/model"
)

// CreateImageRegistryCredential is the resolver for the createImageRegistryCredential field.
func (r *mutationResolver) CreateImageRegistryCredential(ctx context.Context, input model.ImageRegistryCredentialInput) (*model.ImageRegistryCredential, error) {
	record := imageRegistryCredentialInputToDatabaseObject(&input)
	tx := r.ServiceManager.DbClient.Create(&record)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return imageRegistryCredentialToGraphqlObject(record), nil
}

// UpdateImageRegistryCredential is the resolver for the updateImageRegistryCredential field.
func (r *mutationResolver) UpdateImageRegistryCredential(ctx context.Context, id int, input model.ImageRegistryCredentialInput) (*model.ImageRegistryCredential, error) {
	// fetch record
	var record dbmodel.ImageRegistryCredential
	tx := r.ServiceManager.DbClient.First(&record, id)
	if tx.Error != nil {
		return nil, tx.Error
	}
	// update record
	record.Url = input.URL
	record.Username = input.Username
	record.Password = input.Password
	tx = r.ServiceManager.DbClient.Save(&record)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return imageRegistryCredentialToGraphqlObject(&record), nil
}

// DeleteImageRegistryCredential is the resolver for the deleteImageRegistryCredential field.
func (r *mutationResolver) DeleteImageRegistryCredential(ctx context.Context, id int) (*model.ImageRegistryCredential, error) {
	// fetch record
	var record dbmodel.ImageRegistryCredential
	tx := r.ServiceManager.DbClient.First(&record, id)
	if tx.Error != nil {
		return nil, tx.Error
	}
	// delete record
	tx = r.ServiceManager.DbClient.Delete(&record)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return imageRegistryCredentialToGraphqlObject(&record), nil
}

// ImageRegistryCredentials is the resolver for the imageRegistryCredentials field.
func (r *queryResolver) ImageRegistryCredentials(ctx context.Context) ([]*model.ImageRegistryCredential, error) {
	var records []dbmodel.ImageRegistryCredential
	tx := r.ServiceManager.DbClient.Find(&records)
	if tx.Error != nil {
		return nil, tx.Error
	}
	var result []*model.ImageRegistryCredential
	for _, record := range records {
		result = append(result, imageRegistryCredentialToGraphqlObject(&record))
	}
	return result, nil
}

// ImageRegistryCredential is the resolver for the imageRegistryCredential field.
func (r *queryResolver) ImageRegistryCredential(ctx context.Context, id int) (*model.ImageRegistryCredential, error) {
	var record dbmodel.ImageRegistryCredential
	tx := r.ServiceManager.DbClient.First(&record, id)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return imageRegistryCredentialToGraphqlObject(&record), nil
}
