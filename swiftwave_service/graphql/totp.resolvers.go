package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/swiftwave-org/swiftwave/swiftwave_service/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/graphql/model"
	"github.com/xlzd/gotp"
)

// RequestTotpEnable is the resolver for the requestTotpEnable field.
func (r *mutationResolver) RequestTotpEnable(ctx context.Context) (*model.RequestTotpEnable, error) {
	username := ctx.Value("username").(string)
	user, err := core.FindUserByUsername(ctx, r.ServiceManager.DbClient, username)
	if err != nil {
		return nil, err
	}
	// if totp is already enabled
	if user.TotpEnabled {
		return nil, errors.New("totp is already enabled")
	}
	// create totp secret
	totpSecret := gotp.RandomSecret(16)
	totpRecord := gotp.NewDefaultTOTP(totpSecret)
	user.TotpSecret = totpSecret
	err = r.ServiceManager.DbClient.Save(&user).Error
	if err != nil {
		return nil, err
	}
	// return result
	return &model.RequestTotpEnable{
		TotpSecret:          totpSecret,
		TotpProvisioningURI: totpRecord.ProvisioningUri(username, r.Config.LocalConfig.ManagementNodeAddressConsideringTunnelling()),
	}, nil
}

// EnableTotp is the resolver for the enableTotp field.
func (r *mutationResolver) EnableTotp(ctx context.Context, totp string) (bool, error) {
	username := ctx.Value("username").(string)
	user, err := core.FindUserByUsername(ctx, r.ServiceManager.DbClient, username)
	if err != nil {
		return false, err
	}
	// check if secret generated
	if strings.Compare(user.TotpSecret, "") == 0 {
		return false, errors.New("raise totp enable request first")
	}
	// check if totp is enabled
	if user.TotpEnabled {
		return false, errors.New("totp is already enabled")
	}
	// verify totp code
	totpRecord := gotp.NewDefaultTOTP(user.TotpSecret)
	if !totpRecord.Verify(totp, time.Now().Unix()) {
		return false, errors.New("invalid totp code")
	}
	// enable totp
	user.TotpEnabled = true
	err = r.ServiceManager.DbClient.Save(&user).Error
	if err != nil {
		return false, err
	}
	return true, nil
}

// DisableTotp is the resolver for the disableTotp field.
func (r *mutationResolver) DisableTotp(ctx context.Context) (bool, error) {
	err := core.DisableTotp(ctx, r.ServiceManager.DbClient, ctx.Value("username").(string))
	if err != nil {
		return false, err
	}
	return true, nil
}
