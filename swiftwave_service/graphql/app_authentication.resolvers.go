package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"
	haproxymanager "github.com/swiftwave-org/swiftwave/haproxy_manager"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/graphql/model"
	"gorm.io/gorm"
)

// Users is the resolver for the users field.
func (r *appBasicAuthAccessControlListResolver) Users(ctx context.Context, obj *model.AppBasicAuthAccessControlList) ([]*model.AppBasicAuthAccessControlUser, error) {
	records, err := core.FetchAppBasicAuthAccessControlUsers(ctx, &r.ServiceManager.DbClient, obj.ID)
	if err != nil {
		return nil, err
	}
	users := make([]*model.AppBasicAuthAccessControlUser, len(records))
	for i, record := range records {
		users[i] = appBasicAuthAccessControlUserToGraphqlObject(record)
	}
	return users, nil
}

// CreateAppBasicAuthAccessControlList is the resolver for the createAppBasicAuthAccessControlList field.
func (r *mutationResolver) CreateAppBasicAuthAccessControlList(ctx context.Context, input model.AppBasicAuthAccessControlListInput) (*model.AppBasicAuthAccessControlList, error) {
	tx := r.ServiceManager.DbClient.Begin()
	defer tx.Rollback()

	// add in db
	appBasicAuthAccessControlList := appBasicAuthAccessControlListInputToDatabaseObject(&input)
	err := appBasicAuthAccessControlList.Create(ctx, *tx)
	if err != nil {
		return nil, err
	}
	// add in haproxy + commit
	ctx = context.WithValue(ctx, "access_control_user_list_name", appBasicAuthAccessControlList.Name)
	err = r.RunActionsInAllHAProxyNodes(ctx, tx, func(ctx context.Context, db *gorm.DB, transactionId string, manager *haproxymanager.Manager) error {
		// fetch the name of the access control list
		userList := ctx.Value("access_control_user_list_name").(string)
		return manager.AddUserList(transactionId, userList)
	})
	if err != nil {
		return nil, err
	}
	// commit to db
	return appBasicAuthAccessControlListToGraphqlObject(appBasicAuthAccessControlList), tx.Commit().Error
}

// DeleteAppBasicAuthAccessControlList is the resolver for the deleteAppBasicAuthAccessControlList field.
func (r *mutationResolver) DeleteAppBasicAuthAccessControlList(ctx context.Context, id uint) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAppBasicAuthAccessControlList - deleteAppBasicAuthAccessControlList"))
}

// CreateAppBasicAuthAccessControlUser is the resolver for the createAppBasicAuthAccessControlUser field.
func (r *mutationResolver) CreateAppBasicAuthAccessControlUser(ctx context.Context, input model.AppBasicAuthAccessControlUserInput) (*model.AppBasicAuthAccessControlUser, error) {
	panic(fmt.Errorf("not implemented: CreateAppBasicAuthAccessControlUser - createAppBasicAuthAccessControlUser"))
}

// UpdateAppBasicAuthAccessControlUserPassword is the resolver for the updateAppBasicAuthAccessControlUserPassword field.
func (r *mutationResolver) UpdateAppBasicAuthAccessControlUserPassword(ctx context.Context, id uint, password string) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateAppBasicAuthAccessControlUserPassword - updateAppBasicAuthAccessControlUserPassword"))
}

// DeleteAppBasicAuthAccessControlUser is the resolver for the deleteAppBasicAuthAccessControlUser field.
func (r *mutationResolver) DeleteAppBasicAuthAccessControlUser(ctx context.Context, id uint) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAppBasicAuthAccessControlUser - deleteAppBasicAuthAccessControlUser"))
}

// AppBasicAuthAccessControlLists is the resolver for the appBasicAuthAccessControlLists field.
func (r *queryResolver) AppBasicAuthAccessControlLists(ctx context.Context) ([]*model.AppBasicAuthAccessControlList, error) {
	panic(fmt.Errorf("not implemented: AppBasicAuthAccessControlLists - appBasicAuthAccessControlLists"))
}

// AppBasicAuthAccessControlUsers is the resolver for the appBasicAuthAccessControlUsers field.
func (r *queryResolver) AppBasicAuthAccessControlUsers(ctx context.Context, appBasicAuthAccessControlListID uint) ([]*model.AppBasicAuthAccessControlUser, error) {
	panic(fmt.Errorf("not implemented: AppBasicAuthAccessControlUsers - appBasicAuthAccessControlUsers"))
}

// AppBasicAuthAccessControlList returns AppBasicAuthAccessControlListResolver implementation.
func (r *Resolver) AppBasicAuthAccessControlList() AppBasicAuthAccessControlListResolver {
	return &appBasicAuthAccessControlListResolver{r}
}

type appBasicAuthAccessControlListResolver struct{ *Resolver }
