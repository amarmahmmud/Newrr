type GitCredential {
    id: Uint!
    name: String!
    username: String!
    password: String!
    deployments: [Deployment!]!
}

input GitCredentialInput {
    name: String!
    username: String!
    password: String!
}

input GitCredentialRepositoryAccessInput {
    gitCredentialId: Uint!
    repositoryUrl: String!
    repositoryBranch: String!
}

type GitCredentialRepositoryAccessResult {
    gitCredentialId: Uint!
    gitCredential: GitCredential!
    repositoryUrl: String!
    repositoryBranch: String!
    success: Boolean!
    error: String!
}

extend type Query {
    gitCredentials: [GitCredential!]!
    gitCredential(id: Uint!): GitCredential!
    checkGitCredentialRepositoryAccess(input: GitCredentialRepositoryAccessInput!): GitCredentialRepositoryAccessResult!
}

extend type Mutation {
    createGitCredential(input: GitCredentialInput!): GitCredential!
    updateGitCredential(id: Uint!, input: GitCredentialInput!): GitCredential!
    deleteGitCredential(id: Uint!): Boolean!
}
