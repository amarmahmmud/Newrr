enum SwarmMode {
    manager
    worker
}

enum ProxyType {
    backup
    active
}

enum ServerStatus {
    needs_setup
    preparing
    online
    offline
}

enum ServerResourceAnalyticsTimeframe {
    last_1_hour
    last_24_hours
    last_7_days
    last_30_days
}

input NewServerInput {
    ip: String!
    user: String!
}

type Server {
    id: Uint!
    ip: String!
    hostname: String!
    user: String!
    swarmMode: SwarmMode!
    scheduleDeployments: Boolean!
    dockerUnixSocketPath: String!
    proxyEnabled: Boolean!
    proxyType: ProxyType!
    status: ServerStatus!
    logs: [ServerLog!]!
}

input ServerSetupInput {
    id: Uint!
    dockerUnixSocketPath: String!
    swarmMode: SwarmMode!
}

type Dependency {
    name: String!
    available: Boolean!
}

type ServerResourceAnalytics {
    cpu_usage_percent: Int!
    memory_total_gb: Float!
    memory_used_gb: Float!
    memory_cached_gb: Float!
    network_sent_kbps: Uint64!
    network_recv_kbps: Uint64!
    timestamp: Time!
}

type ServerDiskUsage {
    path: String!
    mount_point: String!
    total_gb: Float!
    used_gb: Float!
    timestamp: Time!
}

type ServerDisksUsage {
    disks: [ServerDiskUsage!]!
    timestamp: Time!
}

extend type Query {
    servers: [Server!]
    publicSSHKey: String!
    serverResourceAnalytics(id: Uint!, timeframe: ServerResourceAnalyticsTimeframe!): [ServerResourceAnalytics!]!
    serverDiskUsage(id: Uint!): [ServerDisksUsage!]! # return last 100 records
    serverLatestResourceAnalytics(id: Uint!): ServerResourceAnalytics!
    serverLatestDiskUsage(id: Uint!): ServerDisksUsage!
}

extend type Mutation {
    createServer(input: NewServerInput!): Server!
    testSSHAccessToServer(id: Uint!): Boolean!
    checkDependenciesOnServer(id: Uint!): [Dependency!]
    installDependenciesOnServer(id: Uint!): Boolean!
    setupServer(input: ServerSetupInput!): Boolean!
    promoteServerToManager(id: Uint!): Boolean!
    demoteServerToWorker(id: Uint!): Boolean!
    restrictDeploymentOnServer(id: Uint!): Boolean!
    allowDeploymentOnServer(id: Uint!): Boolean!
    removeServerFromSwarmCluster(id: Uint!): Boolean!
    enableProxyOnServer(id: Uint!): Boolean!
    disableProxyOnServer(id: Uint!): Boolean!
    fetchAnalyticsServiceToken(id: Uint!, rotate:Boolean!): String!
}