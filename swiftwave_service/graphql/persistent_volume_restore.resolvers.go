package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/swiftwave-org/swiftwave/swiftwave_service/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/graphql/model"
)

// InitiatePersistentVolumeRestore is the resolver for the initiatePersistentVolumeRestore field.
func (r *mutationResolver) InitiatePersistentVolumeRestore(ctx context.Context, input model.PersistentVolumeRestoreInput) (*model.PersistentVolumeRestore, error) {
	// fetch the persistent volume
	var persistentVolume core.PersistentVolume
	err := persistentVolume.FindById(ctx, r.ServiceManager.DbClient, input.PersistentVolumeID)
	if err != nil {
		return nil, err
	}
	// create a new persistent volume restore
	record := persistentVolumeRestoreInputToDatabaseObject(&input)
	err = record.Create(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	// return the created persistent volume restore
	return persistentVolumeRestoreToGraphqlObject(record), nil
}

// StartPersistentVolumeRestore is the resolver for the startPersistentVolumeRestore field.
func (r *mutationResolver) StartPersistentVolumeRestore(ctx context.Context, id uint) (bool, error) {
	// fetch the persistent volume restore
	var record core.PersistentVolumeRestore
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	if record.Status != core.RestoreUploaded {
		return false, fmt.Errorf("restoration file has not been uploaded")
	}
	// enqueue the restore job
	err = r.WorkerManager.EnqueuePersistentVolumeRestoreRequest(record.ID)
	if err != nil {
		log.Println(err)
		return false, errors.New("failed to enqueue restore job ! try again")
	}
	return true, nil
}

// DeletePersistentVolumeRestore is the resolver for the deletePersistentVolumeRestore field.
func (r *mutationResolver) DeletePersistentVolumeRestore(ctx context.Context, id uint) (bool, error) {
	// fetch the persistent volume restore
	var record core.PersistentVolumeRestore
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	// delete the persistent volume restore
	err = record.Delete(ctx, r.ServiceManager.DbClient, r.ServiceConfig.ServiceConfig.DataDir)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DeletePersistentVolumeRestoresByPersistentVolumeID is the resolver for the deletePersistentVolumeRestoresByPersistentVolumeId field.
func (r *mutationResolver) DeletePersistentVolumeRestoresByPersistentVolumeID(ctx context.Context, persistentVolumeID uint) (bool, error) {
	// delete all persistent volume restores
	err := core.DeletePersistentVolumeRestoresByPersistentVolumeId(ctx, r.ServiceManager.DbClient, persistentVolumeID, r.ServiceConfig.ServiceConfig.DataDir)
	if err != nil {
		return false, err
	}
	return true, nil
}
