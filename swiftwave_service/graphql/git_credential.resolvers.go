package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	GIT "github.com/swiftwave-org/swiftwave/git_manager"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/graphql/model"
)

// Deployments is the resolver for the deployments field.
func (r *gitCredentialResolver) Deployments(ctx context.Context, obj *model.GitCredential) ([]*model.Deployment, error) {
	// fetch record
	records, err := core.FindDeploymentsByGitCredentialId(ctx, r.ServiceManager.DbClient, obj.ID)
	if err != nil {
		return nil, err
	}
	// convert to graphql object
	var result = make([]*model.Deployment, 0)
	for _, record := range records {
		result = append(result, deploymentToGraphqlObject(record))
	}
	return result, nil
}

// CreateGitCredential is the resolver for the createGitCredential field.
func (r *mutationResolver) CreateGitCredential(ctx context.Context, input model.GitCredentialInput) (*model.GitCredential, error) {
	record := gitCredentialInputToDatabaseObject(&input)
	err := record.Create(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	return gitCredentialToGraphqlObject(record), nil
}

// UpdateGitCredential is the resolver for the updateGitCredential field.
func (r *mutationResolver) UpdateGitCredential(ctx context.Context, id uint, input model.GitCredentialInput) (*model.GitCredential, error) {
	// fetch record
	var record = &core.GitCredential{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return nil, err
	}
	// update record
	record.Name = input.Name
	record.Username = input.Username
	record.Password = input.Password
	err = record.Update(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	return gitCredentialToGraphqlObject(record), nil
}

// DeleteGitCredential is the resolver for the deleteGitCredential field.
func (r *mutationResolver) DeleteGitCredential(ctx context.Context, id uint) (bool, error) {
	// fetch record
	var record = &core.GitCredential{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	// delete record
	err = record.Delete(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return false, err
	}
	return true, nil
}

// GitCredentials is the resolver for the GitCredentials field.
func (r *queryResolver) GitCredentials(ctx context.Context) ([]*model.GitCredential, error) {
	records, err := core.FindAllGitCredentials(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	var gitCredentials []*model.GitCredential
	for _, record := range records {
		gitCredentials = append(gitCredentials, gitCredentialToGraphqlObject(record))
	}
	return gitCredentials, nil
}

// GitCredential is the resolver for the GitCredential field.
func (r *queryResolver) GitCredential(ctx context.Context, id uint) (*model.GitCredential, error) {
	var record = &core.GitCredential{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return nil, err
	}
	return gitCredentialToGraphqlObject(record), nil
}

// CheckGitCredentialRepositoryAccess is the resolver for the checkGitCredentialRepositoryAccess field.
func (r *queryResolver) CheckGitCredentialRepositoryAccess(ctx context.Context, input model.GitCredentialRepositoryAccessInput) (*model.GitCredentialRepositoryAccessResult, error) {
	// Fetch git credential
	var gitCredential = &core.GitCredential{}
	tx := r.ServiceManager.DbClient.First(&gitCredential, input.GitCredentialID)
	if tx.Error != nil {
		return nil, tx.Error
	}
	// Prepare result object
	gitCredentialTestResult := &model.GitCredentialRepositoryAccessResult{
		GitCredentialID:  input.GitCredentialID,
		RepositoryURL:    input.RepositoryURL,
		RepositoryBranch: input.RepositoryBranch,
		GitCredential:    gitCredentialToGraphqlObject(gitCredential),
	}
	// Test git credential
	_, err := GIT.FetchLatestCommitHash(input.RepositoryURL, input.RepositoryBranch, gitCredential.Username, gitCredential.Password)
	if err != nil {
		gitCredentialTestResult.Success = false
		gitCredentialTestResult.Error = "Git credential does not have access to the repository"
	} else {
		gitCredentialTestResult.Success = true
		gitCredentialTestResult.Error = ""
	}
	return gitCredentialTestResult, nil
}

// GitCredential returns GitCredentialResolver implementation.
func (r *Resolver) GitCredential() GitCredentialResolver { return &gitCredentialResolver{r} }

type gitCredentialResolver struct{ *Resolver }
